# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the PYTHON_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy Python app to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: '3.8'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./.venv
          # key must not be empty; usa hashFiles para crear una key determinista
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Debug cache info
        run: |
          echo "CACHE_KEY=${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}"
          echo "Listing cache paths (if exist):"
          ls -la ~/.cache || true
          ls -la ./.venv || true

      - name: Create virtual environment
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip

      - name: Install dependencies
        run: |
          . .venv/bin/activate
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests (optional)
        run: |
          . .venv/bin/activate
          # Descomenta o reemplaza según tus tests
          # pytest -q

      - name: Build (opcional)
        run: |
          . .venv/bin/activate
          # Agrega pasos de build si aplica

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          # Publica usando el perfil; define el secreto AZURE_WEBAPP_PUBLISH_PROFILE en Settings -> Secrets
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          # package: '.' publica la raíz del repo; ajusta si tu build genera una carpeta específica
          package: '.'

      # Ejemplo de uso de salida sin usar ::set-output (solo si necesitas producir una salida para otros pasos)
      # - name: Set custom output (si otro job necesita esta salida)
      #   run: echo "deploy_status=success" >> $GITHUB_OUTPUT
